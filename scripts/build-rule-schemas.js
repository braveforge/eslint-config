import './no-console.js';
import { writeFile } from 'node:fs/promises';
import { join } from 'node:path';
import pluginImportX from 'eslint-plugin-import-x';
import pluginPackageJson from 'eslint-plugin-package-json';
import pluginPerfectionist from 'eslint-plugin-perfectionist';
import pluginUnicorn from 'eslint-plugin-unicorn';
import tseslint from 'typescript-eslint';

/**
 * @param {string} value
 * @returns {string}
 */
function pascalCase (value) {
  return value.match(/\w/g, (m) => m[0].toUpperCase() + m.slice(1));
}

/**
 * @param {string} name
 * @param {import('./types').ESLintPlugin} plugin
 */
function buildRuleSchemas (name, plugin) {
  let template = '// This file is autogenerated by scripts/build-rule-schemas.js\n// Do NOT modify this file manually\n\n';

  template += `import type { Linter } from 'eslint';\n\n`;
  template += `export interface ${pascalCase(`${name}Rules`)} {\n`;

  for (const key of Object.keys(plugin.rules)) {
    template += `  '${name}/${key}': Linter.RuleEntry;\n`;
  }

  template += '}';

  writeFile(join(process.cwd(), `./rule-schemas/${name}.ts`), template);
}

buildRuleSchemas('import-x', pluginImportX);
buildRuleSchemas('package-json', pluginPackageJson);
buildRuleSchemas('perfectionist', pluginPerfectionist);
buildRuleSchemas('unicorn', pluginUnicorn);
buildRuleSchemas('typescript', tseslint.plugin);
