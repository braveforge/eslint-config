import confusingBrowserGlobals from 'confusing-browser-globals';
import type { Linter } from 'eslint';
import type { ESLintRules } from 'eslint/rules';

const rules: Partial<ESLintRules> = {
  'accessor-pairs': 'error',
  'array-callback-return': [
    'error',
    {
      checkForEach: true,
    },
  ],
  'block-scoped-var': 'error',
  camelcase: [
    'error',
    {
      ignoreDestructuring: false,
      ignoreGlobals: true,
      ignoreImports: false,
      properties: 'never',
    },
  ],
  'class-methods-use-this': 'error',
  'constructor-super': 'error',
  curly: 'error',
  'default-case': 'error',
  'default-case-last': 'error',
  'default-param-last': 'error',
  'dot-notation': 'error',
  eqeqeq: ['error', 'always'],
  'for-direction': 'error',
  'func-name-matching': 'error',
  'func-names': ['error', 'as-needed'],
  'func-style': [
    'error',
    'declaration',
    {
      allowArrowFunctions: true,
    },
  ],
  'getter-return': 'error',
  'grouped-accessor-pairs': ['error', 'getBeforeSet'],
  'max-params': 'error',
  'new-cap': 'error',
  'no-alert': 'error',
  'no-array-constructor': 'error',
  'no-async-promise-executor': 'error',
  'no-await-in-loop': 'error',
  'no-caller': 'error',
  'no-case-declarations': 'error',
  'no-class-assign': 'error',
  'no-compare-neg-zero': 'error',
  'no-cond-assign': 'error',
  'no-console': [
    'error',
    {
      allow: ['error'],
    },
  ],
  'no-const-assign': 'error',
  'no-constant-binary-expression': 'error',
  'no-constant-condition': 'error',
  'no-constructor-return': 'error',
  'no-control-regex': 'error',
  'no-debugger': 'error',
  'no-delete-var': 'error',
  'no-dupe-args': 'error',
  'no-dupe-class-members': 'error',
  'no-dupe-else-if': 'error',
  'no-dupe-keys': 'error',
  'no-duplicate-case': 'error',
  'no-duplicate-imports': 'error',
  'no-else-return': [
    'error',
    {
      allowElseIf: false,
    },
  ],
  'no-empty': 'error',
  'no-empty-character-class': 'error',
  'no-empty-function': 'error',
  'no-empty-pattern': 'error',
  'no-empty-static-block': 'error',
  'no-eq-null': 'error',
  'no-eval': 'error',
  'no-ex-assign': 'error',
  'no-extend-native': 'error',
  'no-extra-bind': 'error',
  'no-extra-boolean-cast': [
    'error',
    {
      enforceForInnerExpressions: true,
    },
  ],
  'no-extra-label': 'error',
  'no-fallthrough': [
    'error',
    {
      allowEmptyCase: true,
      commentPattern: String.raw`break[\s\w]*omitted`,
      reportUnusedFallthroughComment: true,
    },
  ],
  'no-func-assign': 'error',
  'no-global-assign': 'error',
  'no-implied-eval': 'error',
  'no-import-assign': 'error',
  'no-inner-declarations': ['error', 'both'],
  'no-invalid-regexp': 'error',
  'no-invalid-this': 'error',
  'no-irregular-whitespace': 'error',
  'no-iterator': 'error',
  'no-label-var': 'error',
  'no-lone-blocks': 'error',
  'no-lonely-if': 'error',
  'no-loss-of-precision': 'error',
  'no-misleading-character-class': 'error',
  'no-multi-assign': 'error',
  'no-multi-str': 'error',
  'no-negated-condition': 'error',
  'no-new-native-nonconstructor': 'error',
  'no-new-wrappers': 'error',
  'no-nonoctal-decimal-escape': 'error',
  'no-obj-calls': 'error',
  'no-object-constructor': 'error',
  'no-octal': 'error',
  'no-octal-escape': 'error',
  'no-param-reassign': 'error',
  'no-plusplus': [
    'error',
    {
      allowForLoopAfterthoughts: true,
    },
  ],
  'no-promise-executor-return': 'error',
  'no-proto': 'error',
  'no-prototype-builtins': 'error',
  'no-redeclare': 'error',
  'no-regex-spaces': 'error',
  'no-restricted-globals': ['error', ...confusingBrowserGlobals],
  'no-restricted-syntax': [
    'error',
    {
      message: 'Avoid for...in. \nUse Object.entries/Object.keys/Object.values with for...of instead.',
      selector: 'ForInStatement',
    },
  ],
  'no-return-assign': 'error',
  'no-self-assign': 'error',
  'no-self-compare': 'error',
  'no-sequences': 'error',
  'no-setter-return': 'error',
  'no-shadow-restricted-names': 'error',
  'no-sparse-arrays': 'error',
  'no-template-curly-in-string': 'error',
  'no-this-before-super': 'error',
  'no-undef': 'error',
  'no-undef-init': 'error',
  'no-unexpected-multiline': 'error',
  'no-unmodified-loop-condition': 'error',
  'no-unneeded-ternary': 'error',
  'no-unreachable': 'error',
  'no-unreachable-loop': 'error',
  'no-unsafe-finally': 'error',
  'no-unsafe-negation': 'error',
  'no-unsafe-optional-chaining': [
    'error',
    {
      disallowArithmeticOperators: true,
    },
  ],
  'no-unused-expressions': 'error',
  'no-unused-labels': 'error',
  'no-unused-private-class-members': 'error',
  'no-unused-vars': 'error',
  'no-useless-assignment': 'error',
  'no-useless-backreference': 'error',
  'no-useless-call': 'error',
  'no-useless-catch': 'error',
  'no-useless-computed-key': 'error',
  'no-useless-constructor': 'error',
  'no-useless-escape': 'error',
  'no-useless-rename': 'error',
  'no-useless-return': 'error',
  'no-var': 'error',
  'no-with': 'error',
  'object-shorthand': 'error',
  'prefer-arrow-callback': [
    'error',
    {
      allowNamedFunctions: true,
    },
  ],
  'prefer-const': [
    'error',
    {
      destructuring: 'all',
    },
  ],
  'prefer-exponentiation-operator': 'error',
  'prefer-object-has-own': 'error',
  'prefer-object-spread': 'error',
  'prefer-rest-params': 'error',
  'prefer-spread': 'error',
  'prefer-template': 'error',
  'require-atomic-updates': 'error',
  'symbol-description': 'error',
  'use-isnan': 'error',
  'valid-typeof': 'error',
  yoda: 'error',
};

export const js: Linter.Config = {
  rules,
};
